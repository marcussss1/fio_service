// Code generated by MockGen. DO NOT EDIT.
// Source: internal/fio_service/usecase.go

// Package mock_fio_service is a generated GoMock package.
package mock_fio_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/marcussss1/fio_service/internal/models"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// CreatePeople mocks base method.
func (m *MockUsecase) CreatePeople(ctx context.Context, req models.AbbreviatedPeopleRequest) (models.People, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePeople", ctx, req)
	ret0, _ := ret[0].(models.People)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePeople indicates an expected call of CreatePeople.
func (mr *MockUsecaseMockRecorder) CreatePeople(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePeople", reflect.TypeOf((*MockUsecase)(nil).CreatePeople), ctx, req)
}

// DeletePeopleByID mocks base method.
func (m *MockUsecase) DeletePeopleByID(ctx context.Context, peopleID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePeopleByID", ctx, peopleID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePeopleByID indicates an expected call of DeletePeopleByID.
func (mr *MockUsecaseMockRecorder) DeletePeopleByID(ctx, peopleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePeopleByID", reflect.TypeOf((*MockUsecase)(nil).DeletePeopleByID), ctx, peopleID)
}

// GetPeople mocks base method.
func (m *MockUsecase) GetPeople(ctx context.Context, req models.GetPeopleRequest) ([]models.People, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeople", ctx, req)
	ret0, _ := ret[0].([]models.People)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeople indicates an expected call of GetPeople.
func (mr *MockUsecaseMockRecorder) GetPeople(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeople", reflect.TypeOf((*MockUsecase)(nil).GetPeople), ctx, req)
}

// UpdatePeopleByID mocks base method.
func (m *MockUsecase) UpdatePeopleByID(ctx context.Context, req models.AbbreviatedPeopleRequest, peopleID string) (models.People, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePeopleByID", ctx, req, peopleID)
	ret0, _ := ret[0].(models.People)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePeopleByID indicates an expected call of UpdatePeopleByID.
func (mr *MockUsecaseMockRecorder) UpdatePeopleByID(ctx, req, peopleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePeopleByID", reflect.TypeOf((*MockUsecase)(nil).UpdatePeopleByID), ctx, req, peopleID)
}
